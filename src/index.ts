import express, { Request, Response, NextFunction } from "express";
import cors from "cors";
import bodyParser from "body-parser";
import { Stripe } from "stripe";
import { v4 as uuidv4 } from "uuid";
import { CartInfo, LineItem, Product, StripePrice } from './types';

import env from "dotenv";

env.config();

const stripe = new Stripe(process.env.STRIPE_SK as string, {
  apiVersion: "2020-08-27",
});

const app = express();
app.use(cors());
app.use(bodyParser.json());

app.post("/payment", async (req: Request, res: Response, next: NextFunction) => {
    const { email, cartInfo, authToken } = req.body;
    const { token } = authToken;
    const { card } = token;

    console.log("authToken, result of stripe.createToken", authToken);
    console.log("card", card);
    console.log("cartInfo", cartInfo);

    console.log("============================================== payment initiate =======================");

    // unique ID generated by client
    const idempotencyKey = uuidv4();
    const cart = cartInfo as CartInfo;

    try {
      const customer = await stripe.customers.create({
        email: email,
        source: token.id,
      });

      console.log("Customer Created.....");
      console.log(customer);

      const response = await stripe.charges.create(
        {
          amount: cart.amount,
          currency: "USD",
          customer: customer.id,
          receipt_email: email,
          description: cart.description,
          shipping: {
            name: card.name,
            address: {
              line1: "San Jose",
              country: card.address_country,
            },
          },
        },
        { idempotencyKey: idempotencyKey }
      );

      console.log("charge response");
      console.log(response);

      res.json(response);
    } catch (err) {
      console.log("=========================================== error ==========================");
      console.log(err);
      res.json(err);
    }
  }
);

app.post("/create-checkout-session", async (req: Request, res: Response, next: NextFunction) => {
    const { cart } = req.body;
    const lineItems: LineItem[] = [];
    const defaultHeaders = {Authorization: `Bearer ${process.env.STRIPE_SK}`};

    const stripePrices = await stripe.prices.list();
    console.log("stripePrices", stripePrices)
    // const stripePrices = await fetch(`https://api.stripe.com/v1/prices`, {
    //     method: "GET",
    //     headers: new Headers(defaultHeaders),
    //   }).then((res) => res.json());

    const prices = stripePrices.data
    if (!prices || prices.length === 0) return [];

    // Validates price for each product and builds lineItems array to use it in stripe sessions API 
    cart.forEach((product: Product) => {
    const { id, name, quantity } = product;
    const validPrice = prices.find((price) => price.product === id );
    console.log("validPrice", validPrice)

    lineItems.push({
        price_data: {
        currency: "usd",
        product_data: {
            name,
        },
        unit_amount: validPrice !== undefined && typeof validPrice.unit_amount === 'number' ? validPrice.unit_amount : 0,
        },
        quantity,
      });
    });

    const session = await stripe.checkout.sessions.create({
      payment_method_types: ["card"],
      line_items: lineItems,
      mode: "payment",
      success_url: "https://www.visualdemand.co/?sc_checkout=success",
      cancel_url: "https://www.google.com/?sc_checkout=cancel",
    });

    res.json({ id: session.id });
  }
);

app.use("/", (req, res, next) => {
  res.json("Thank you...");
});

app.listen(8000, () => {
  console.log("Listening to port 8000");
});
